// Generated by CoffeeScript 1.11.0
(function() {
  var rotationZoomer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($) {
    return $.fn.rotationZoomer = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return this.each(function(index, el) {
        return new rotationZoomer(el, opts);
      });
    };
  })($);

  rotationZoomer = (function() {
    function rotationZoomer(el, opts) {
      this.rotateACW = bind(this.rotateACW, this);
      this.rotateDefault = bind(this.rotateDefault, this);
      this.$el = $(el);
      this.parseOptions(opts);
      this.deg = this.opts.initialRotation;
      this.initialize();
    }

    rotationZoomer.prototype.parseOptions = function(opts) {
      this.opts = {};
      return this.opts = {
        rotateButton: $(opts.rotateButton) || $('<button>').addClass('rotation-zoomer-rotate-cw'),
        antiRotateButton: $(opts.antiRotateButton) || $('<button>').addClass('rotation-zoomer-rotate-acw'),
        stepping: opts.stepping || 90,
        initialRotation: opts.initialRotation || this.$el.data('initial-rotation' || opts.initialRotationDataAttr) || 0
      };
    };

    rotationZoomer.prototype.initialize = function() {
      var wrapper;
      wrapper = $('<div>').addClass('rotation-zoomer-wrapper');
      this.$el.wrap(wrapper);
      this.$wrapper = this.$el.parents('.rotation-zoomer-wrapper').first();
      this.bindControls();
      return this.transform();
    };

    rotationZoomer.prototype.rotate = function(dir) {
      var degrees;
      if (dir == null) {
        dir = true;
      }
      degrees = this.degrees(dir);
      this.$wrapper.data({
        dir: dir,
        degrees: degrees
      });
      return this.transform();
    };

    rotationZoomer.prototype.rotateDefault = function() {
      return this.rotate();
    };

    rotationZoomer.prototype.rotateACW = function() {
      var dir;
      return this.rotate(dir = false);
    };

    rotationZoomer.prototype.degrees = function(dir) {
      this.deg = dir ? this.calculateCW() : this.calculateACW();
      return this.deg;
    };

    rotationZoomer.prototype.calculateCW = function() {
      if (this.deg + this.opts.stepping >= 360) {
        return 0;
      } else {
        return this.deg + this.opts.stepping;
      }
    };

    rotationZoomer.prototype.calculateACW = function() {
      if (this.deg - this.opts.stepping <= 0) {
        return 360;
      } else {
        return this.deg - this.opts.stepping;
      }
    };

    rotationZoomer.prototype.wrapperCSS = function() {
      var base;
      base = {
        transform: "rotate(" + this.deg + "deg)",
        display: "inline-block",
        margin: '0px',
        padding: '0px'
      };
      if (this.deg === 90 || 270) {
        base.width = this.prev.height;
        base.height = this.prev.width;
      } else {
        base.width = this.prev.width;
        base.height = this.prev.height;
      }
      return base;
    };

    rotationZoomer.prototype.elCSS = function() {
      var base;
      base = {};
      if (this.deg === 90 || 270) {
        base.width = '100%';
        base.height = 'auto';
      } else {
        base.width = 'auto';
        base.height = '100%';
      }
      return base;
    };

    rotationZoomer.prototype.transform = function() {
      this.prevDimensions();
      this.$wrapper.css(this.wrapperCSS());
      this.$el.css(this.elCSS());
      this.curDimensions();
      console.log(this.prev);
      return console.log(this.current);
    };

    rotationZoomer.prototype.prevDimensions = function() {
      return this.prev = this.dimensionObject();
    };

    rotationZoomer.prototype.curDimensions = function() {
      return this.current = this.dimensionObject();
    };

    rotationZoomer.prototype.dimensionObject = function() {
      return $.extend({}, {
        width: this.$wrapper.outerWidth(),
        height: this.$wrapper.outerHeight()
      }, this.$wrapper.offset());
    };

    rotationZoomer.prototype.bindControls = function() {
      this.opts.rotateButton.on('click', this.rotateDefault);
      return this.opts.antiRotateButton.on('click', this.rotateACW);
    };

    return rotationZoomer;

  })();

}).call(this);
