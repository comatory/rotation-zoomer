// Generated by CoffeeScript 1.11.0
(function() {
  var Zoomer, rotationZoomer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($) {
    return $.fn.rotationZoomer = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return this.each(function(index, el) {
        return new rotationZoomer(el, opts);
      });
    };
  })($);

  rotationZoomer = (function() {
    function rotationZoomer(el, opts) {
      this.zoom = bind(this.zoom, this);
      this.handleClick = bind(this.handleClick, this);
      this.$el = $(el);
      this.el = el;
      this.opts = opts;
      this.parseOptions();
      this.initialize();
    }

    rotationZoomer.prototype.initialize = function() {
      this.width = this.$el.width();
      this.height = this.$el.height();
      this.dimensions = {
        vert: {
          w: this.width,
          h: this.height
        },
        hor: {
          w: this.height,
          h: this.width
        }
      };
      this.zoomers = [];
      return this.initializeCanvas();
    };

    rotationZoomer.prototype.initializeCanvas = function() {
      this.$canvas = $('<canvas>');
      this.$canvas.css({
        position: this.$el.css('position'),
        display: this.$el.css('display')
      });
      this.$el.parents().first().append(this.$canvas);
      this.$el.css('display', 'none');
      this.context = this.$canvas.get(0).getContext('2d');
      this.bindControls();
      return this.transform();
    };

    rotationZoomer.prototype.parseOptions = function() {
      var err;
      this.options = {
        rotation: this.opts.rotation || 0,
        rotateButton: this.opts.rotateButton,
        antiRotateButton: this.opts.antiRotateButton,
        zoomerWidth: this.opts.ZoomerWidth || 150,
        zoomerHeight: this.opts.ZoomerHeight || 100,
        scale: this.opts.scale || 2.5,
        closeOnClick: this.opts.closeOnClick || true,
        closeOnClickOutside: this.opts.closeOnClickOutside || true,
        multiZoom: this.opts.multiZoom || false,
        showZoomerAfterRotation: this.opts.showZoomerAfterRotation || true
      };
      if (this.options.closeOnClick && this.options.multiZoom) {
        this.options.multiZoom = false;
        err = 'You set options "closeOnClick" and "multiZoom" to true. \n';
        err += ' This is invalid combination of arguments. Setting "multiZoom" to false.';
        console.warn(err);
      }
      this.deg = this.options.rotation;
      return this.options;
    };

    rotationZoomer.prototype.bindControls = function() {
      if (this.options.rotateButton) {
        this.$rotateButton = $(this.options.rotateButton);
      }
      if (this.options.antiRotateButton) {
        this.$antiRotateButton = $(this.options.antiRotateButton);
      }
      if (this.$rotateButton) {
        this.$rotateButton.on('click', (function(_this) {
          return function() {
            return _this.rotateCW();
          };
        })(this));
      }
      if (this.$antiRotateButton) {
        this.$antiRotateButton.on('click', (function(_this) {
          return function() {
            return _this.rotateACW();
          };
        })(this));
      }
      return this.$canvas.on('click', this.handleClick);
    };

    rotationZoomer.prototype.setWidthAndHeight = function() {
      if (this.hasHorizontalRotation()) {
        this.width = this.dimensions.hor.w;
        return this.height = this.dimensions.hor.h;
      } else {
        this.width = this.dimensions.vert.w;
        return this.height = this.dimensions.vert.h;
      }
    };

    rotationZoomer.prototype.transform = function() {
      this.setWidthAndHeight();
      this.context.canvas.width = this.width;
      this.context.canvas.height = this.height;
      return this.rotate();
    };

    rotationZoomer.prototype.rotate = function() {
      this.context.save();
      switch (this.deg) {
        case 90:
          this.context.translate(this.width, 0);
          break;
        case 270:
          this.context.translate(0, this.height);
          break;
        case 180:
          this.context.translate(this.width, this.height);
          break;
      }
      this.context.rotate((Math.PI / 180) * this.deg);
      return this.redraw();
    };

    rotationZoomer.prototype.rotateCW = function() {
      this.deg = this.deg + 90 >= 360 ? 0 : this.deg + 90;
      this.transform();
      return this.deg;
    };

    rotationZoomer.prototype.rotateACW = function() {
      this.deg = this.deg - 90 < 0 ? 270 : this.deg - 90;
      this.transform();
      return this.deg;
    };

    rotationZoomer.prototype.hasHorizontalRotation = function() {
      return this.deg === 90 || this.deg === 270;
    };

    rotationZoomer.prototype.clear = function() {
      return this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
    };

    rotationZoomer.prototype.redraw = function() {
      this.clear();
      this.draw();
      if (!this.options.showZoomerAfterRotation) {
        return this.initializeZoomers();
      }
    };

    rotationZoomer.prototype.draw = function() {
      if (this.hasHorizontalRotation()) {
        return this.context.drawImage(this.el, 0, 0, this.height, this.width);
      } else {
        return this.context.drawImage(this.el, 0, 0, this.width, this.height);
      }
    };

    rotationZoomer.prototype.handleClick = function(e) {
      return this.zoom(e);
    };

    rotationZoomer.prototype.zoom = function(e) {
      this.coords = {
        x: e.clientX - this.context.canvas.getBoundingClientRect().left,
        y: e.clientY - this.context.canvas.getBoundingClientRect().top
      };
      this.sourceCoords = {
        x: -this.coords.x + ((this.options.zoomerWidth / 2) / this.options.scale),
        y: -this.coords.y + ((this.options.zoomerHeight / 2) / this.options.scale)
      };
      return this.addNewZoomer();
    };

    rotationZoomer.prototype.addNewZoomer = function() {
      var zoomerContext;
      zoomerContext = $('<canvas>').get(0).getContext('2d');
      zoomerContext.canvas.width = this.options.zoomerWidth;
      zoomerContext.canvas.height = this.options.zoomerHeight;
      zoomerContext.scale(this.options.scale, this.options.scale);
      zoomerContext.translate(this.sourceCoords.x, this.sourceCoords.y);
      zoomerContext.drawImage(this.context.canvas, 0, 0);
      this.zoomers.push(new Zoomer(zoomerContext, this.options, this.coords.x, this.coords.y, true));
      return this.initializeZoomers();
    };

    rotationZoomer.prototype.initializeZoomers = function() {
      var i, len, ref, results, zoomer;
      this.context.restore();
      ref = this.zoomers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        zoomer = ref[i];
        this.context.drawImage(zoomer.context.canvas, zoomer.originX(), zoomer.originY(), zoomer.context.canvas.width, zoomer.context.canvas.height);
        results.push(this.context.strokeRect(zoomer.originX(), zoomer.originY(), zoomer.context.canvas.width, zoomer.context.canvas.height));
      }
      return results;
    };

    return rotationZoomer;

  })();

  Zoomer = (function() {
    function Zoomer(context, instanceOptions, x, y, active) {
      this.context = $.extend(true, {}, context);
      this.instanceOptions = instanceOptions;
      this.x = x;
      this.y = y;
      this.active = active;
    }

    Zoomer.prototype.originX = function() {
      return this.x - this.instanceOptions.zoomerWidth / 2;
    };

    Zoomer.prototype.originY = function() {
      return this.y - this.instanceOptions.zoomerHeight / 2;
    };

    return Zoomer;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/ondrejsynacek/Projects/rotation-zoomer/source/rotation-zoomer.coffee