// Generated by CoffeeScript 1.11.0
(function() {
  var RotationZoomer, Zoomer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    return $.fn.rotationZoomer = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return this.each(function(index, el) {
        return new RotationZoomer(el, opts);
      });
    };
  })($);

  RotationZoomer = (function() {
    function RotationZoomer(el, opts) {
      this.handleResize = bind(this.handleResize, this);
      this.zoom = bind(this.zoom, this);
      this.trackMovement = bind(this.trackMovement, this);
      this.handleClick = bind(this.handleClick, this);
      this.$el = $(el);
      this.el = el;
      this.opts = opts;
      this.parseOptions();
      this.initialize();
    }

    RotationZoomer.prototype.initialize = function() {
      this.width = this.$el.width();
      this.height = this.$el.height();
      this.ratio = {
        horizontal: this.height / this.width,
        vertical: this.width / this.height
      };
      this.dimensions = {
        vert: {
          w: this.width,
          h: this.height
        },
        hor: {
          w: this.height,
          h: this.width
        }
      };
      this.zoomer = null;
      this.wasCW = null;
      return this.initializeCanvas();
    };

    RotationZoomer.prototype.initializeCanvas = function() {
      this.$canvas = $('<canvas>');
      this.$canvas.css({
        position: this.$el.css('position'),
        display: this.$el.css('display')
      });
      this.$el.replaceWith(this.$canvas);
      this.context = this.$canvas.get(0).getContext('2d');
      this.bindControls();
      return this.transform();
    };

    RotationZoomer.prototype.parseOptions = function() {
      var ref, warning;
      this.options = {
        rotation: this.opts.rotation || 0,
        rotateButton: this.opts.rotateButton,
        antiRotateButton: this.opts.antiRotateButton,
        zoomerEnabled: this.setDefault(this.opts.zoomerEnabled, true),
        zoomerWidth: this.extractNums(this.opts.zoomerWidth || 150),
        zoomerHeight: this.extractNums(this.opts.zoomerHeight || 100),
        scale: this.opts.scale || 2.5,
        responsive: this.setDefault(this.opts.responsive, true),
        zoomerBorderWidth: this.extractNums(this.opts.zoomerBorderWidth || 1),
        zoomerBorderColor: this.opts.zoomerBorderColor || 'black',
        zoomerBackgroundColor: this.opts.zoomerBackgroundColor || 'white',
        closeOnClick: this.setDefault(this.opts.closeOnClick, false),
        closeOnClickOutside: this.setDefault(this.opts.closeOnClickOutside, true),
        showZoomerAfterRotation: this.setDefault(this.opts.showZoomerAfterRotation, true),
        cursorZoomIn: this.setDefault(this.opts.cursorZoomIn, 'zoom-in'),
        cursorZoomClose: this.setDefault(this.opts.cursorZoomClose, 'zoom-out'),
        cursorZoomNoAction: this.setDefault(this.opts.cursorZoomNoAction, 'default')
      };
      if (this.opts.closeOnClick === false && this.opts.closeOnClickOutside === false) {
        this.options.closeOnClick = true;
        this.options.closeOnClickOutside = false;
        warning = "You passed invalid options: Options 'closeOnClick' and 'closeOnClickOutside' were both set to false. You cannot do this. Option 'closeOnClick' was set to true as a default.";
        console.warn(warning);
      }
      if ((ref = this.options.rotation) !== 0 && ref !== 90 && ref !== 180 && ref !== 270) {
        this.options.rotation = 0;
        warning = "You passed invalid options: Options 'rotation' has invalid values, it must be in [0, 90, 180, 270]. No other values allowed! Rotation set to 0.";
        console.warn(warning);
      }
      this.deg = this.options.rotation;
      return this.options;
    };

    RotationZoomer.prototype.setDefault = function(opt, def) {
      if (opt === void 0 || opt === null) {
        return def;
      } else {
        return opt;
      }
    };

    RotationZoomer.prototype.extractNums = function(opt) {
      opt = new String(opt);
      return parseInt(opt.replace(/^\D+/g, ''));
    };

    RotationZoomer.prototype.bindControls = function() {
      if (this.options.rotateButton) {
        this.$rotateButton = $(this.options.rotateButton);
      }
      if (this.options.antiRotateButton) {
        this.$antiRotateButton = $(this.options.antiRotateButton);
      }
      if (this.$rotateButton) {
        this.$rotateButton.on('click', (function(_this) {
          return function() {
            return _this.rotateCW();
          };
        })(this));
      }
      if (this.$antiRotateButton) {
        this.$antiRotateButton.on('click', (function(_this) {
          return function() {
            return _this.rotateACW();
          };
        })(this));
      }
      if (this.options.zoomerEnabled) {
        this.$canvas.on('click', this.handleClick);
        this.$canvas.on('mousemove', this.trackMovement);
      }
      if (this.options.responsive) {
        return $(window).on('resize', (function(_this) {
          return function(e) {
            return _this.handleResize(e);
          };
        })(this));
      }
    };

    RotationZoomer.prototype.setWidthAndHeight = function() {
      if (this.hasHorizontalRotation()) {
        this.width = this.dimensions.hor.w;
        return this.height = this.dimensions.hor.h;
      } else {
        this.width = this.dimensions.vert.w;
        return this.height = this.dimensions.vert.h;
      }
    };

    RotationZoomer.prototype.transform = function() {
      this.setWidthAndHeight();
      this.context.canvas.width = this.width;
      this.context.canvas.height = this.height;
      return this.redraw();
    };

    RotationZoomer.prototype.rotate = function() {
      if (this.options.responsive) {
        this.resetCanvasSize();
      }
      this.context.save();
      switch (this.deg) {
        case 90:
          this.context.translate(this.width, 0);
          break;
        case 270:
          this.context.translate(0, this.height);
          break;
        case 180:
          this.context.translate(this.width, this.height);
          break;
        default:
          this.context.translate(0, 0);
          break;
      }
      this.context.rotate((Math.PI / 180) * this.deg);
      if (!this.options.showZoomerAfterRotation) {
        return this.closeZoomer;
      }
    };

    RotationZoomer.prototype.rotateCW = function() {
      this.deg = this.deg + 90 >= 360 ? 0 : this.deg + 90;
      this.wasCW = true;
      this.transform();
      return this.deg;
    };

    RotationZoomer.prototype.rotateACW = function() {
      this.deg = this.deg - 90 < 0 ? 270 : this.deg - 90;
      this.wasCW = false;
      this.transform();
      return this.deg;
    };

    RotationZoomer.prototype.hasHorizontalRotation = function() {
      return this.deg === 90 || this.deg === 270;
    };

    RotationZoomer.prototype.clear = function() {
      return this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
    };

    RotationZoomer.prototype.redraw = function() {
      this.clear();
      this.rotate();
      return this.draw();
    };

    RotationZoomer.prototype.draw = function() {
      if (this.hasHorizontalRotation()) {
        this.context.drawImage(this.el, 0, 0, this.height, this.width);
      } else {
        this.context.drawImage(this.el, 0, 0, this.width, this.height);
      }
      if (this.options.showZoomerAfterRotation && this.zoomer !== null) {
        return this.reopenZoomer();
      }
    };

    RotationZoomer.prototype.generateBounds = function(e) {
      return {
        x: e.clientX - this.context.canvas.getBoundingClientRect().left,
        y: e.clientY - this.context.canvas.getBoundingClientRect().top
      };
    };

    RotationZoomer.prototype.handleClick = function(e) {
      this.coords = this.generateBounds(e);
      if (this.checkClickedArea()) {
        this.closeZoomer();
        this.setCursorInZoomer();
        this.redraw();
      } else if (this.zoomer === null) {
        this.zoom(e);
      }
      return this.trackMovement(e);
    };

    RotationZoomer.prototype.didClickOnZoomer = function() {
      return this.zoomer.inBounds(this.coords);
    };

    RotationZoomer.prototype.checkClickedArea = function() {
      var res;
      if (!this.zoomer) {
        return false;
      }
      res = this.didClickOnZoomer();
      if (this.options.closeOnClick && this.options.closeOnClickOutside) {
        return true;
      } else if (this.options.closeOnClick) {
        return res;
      } else {
        return !res;
      }
    };

    RotationZoomer.prototype.inBounds = function() {
      if (this.zoomer.originX() + this.zoomerWidth() >= this.width) {
        this.zoomer.x = this.width - (this.zoomerWidth() / 2);
      } else if (this.zoomer.originX() <= 0) {
        this.zoomer.x = this.zoomerWidth() / 2;
      }
      if (this.zoomer.originY() + this.zoomerHeight() >= this.height) {
        return this.zoomer.y = this.height - (this.zoomerHeight() / 2);
      } else if (this.zoomer.originY() <= 0) {
        return this.zoomer.y = this.zoomerHeight() / 2;
      }
    };

    RotationZoomer.prototype.trackMovement = function(e) {
      var trackCoords;
      trackCoords = this.generateBounds(e);
      if (this.zoomer !== null && this.zoomer.inBounds(trackCoords)) {
        return this.setCursorInZoomer();
      } else if (this.zoomer !== null && !this.zoomer.inBounds(trackCoords)) {
        return this.setCursorOutsideZoomer();
      } else {
        return this.setCursorOnCanvas();
      }
    };

    RotationZoomer.prototype.setCursorInZoomer = function() {
      if (this.options.closeOnClick) {
        return this.$canvas.css('cursor', this.options.cursorZoomClose);
      } else {
        return this.$canvas.css('cursor', this.options.cursorZoomNoAction);
      }
    };

    RotationZoomer.prototype.setCursorOutsideZoomer = function() {
      return this.$canvas.css('cursor', this.options.cursorZoomClose);
    };

    RotationZoomer.prototype.setCursorOnCanvas = function() {
      return this.$canvas.css('cursor', this.options.cursorZoomIn);
    };

    RotationZoomer.prototype.zoomerWidth = function() {
      return this.options.zoomerWidth + (2 * this.options.zoomerBorderWidth);
    };

    RotationZoomer.prototype.zoomerHeight = function() {
      return this.options.zoomerHeight + (2 * this.options.zoomerBorderWidth);
    };

    RotationZoomer.prototype.zoom = function(e) {
      return this.openZoomer();
    };

    RotationZoomer.prototype.closeZoomer = function() {
      return this.zoomer = null;
    };

    RotationZoomer.prototype.reopenZoomer = function() {
      var ratio, x, y;
      x = this.zoomer.x;
      y = this.zoomer.y;
      if (this.options.responsive) {
        ratio = this.currentRatio();
        x = x * ratio;
        y = y * ratio;
      }
      if (this.wasCW) {
        this.coords.x = this.width - y;
        this.coords.y = x;
      } else {
        this.coords.x = y;
        this.coords.y = this.height - x;
      }
      return this.openZoomer();
    };

    RotationZoomer.prototype.openZoomer = function() {
      var zoomerContext;
      this.sourceCoords = {
        x: -this.coords.x + ((this.options.zoomerWidth / 2) / this.options.scale),
        y: -this.coords.y + ((this.options.zoomerHeight / 2) / this.options.scale)
      };
      zoomerContext = $('<canvas>').get(0).getContext('2d');
      zoomerContext.canvas.width = this.options.zoomerWidth;
      zoomerContext.canvas.height = this.options.zoomerHeight;
      zoomerContext.fillStyle = this.options.zoomerBackgroundColor;
      zoomerContext.fillRect(0, 0, zoomerContext.canvas.width, zoomerContext.canvas.height);
      zoomerContext.scale(this.options.scale, this.options.scale);
      zoomerContext.translate(this.sourceCoords.x, this.sourceCoords.y);
      zoomerContext.drawImage(this.context.canvas, 0, 0);
      this.zoomer = new Zoomer(zoomerContext, this.coords.x, this.coords.y, {
        zoomerWindowWidth: this.zoomerWidth(),
        zoomerWindowHeight: this.zoomerHeight(),
        zoomerWidth: this.options.zoomerWidth,
        zoomerHeight: this.options.zoomerHeight
      });
      return this.initializeZoomer();
    };

    RotationZoomer.prototype.initializeZoomer = function() {
      this.context.restore();
      this.inBounds();
      this.context.drawImage(this.zoomer.context.canvas, this.zoomer.originX(), this.zoomer.originY(), this.zoomer.context.canvas.width, this.zoomer.context.canvas.height);
      this.context.strokeStyle = this.options.zoomerBorderColor;
      this.context.lineWidth = this.options.zoomerBorderWidth;
      return this.context.strokeRect(this.zoomer.originX(), this.zoomer.originY(), this.zoomer.context.canvas.width, this.zoomer.context.canvas.height);
    };

    RotationZoomer.prototype.handleResize = function(e) {
      this.closeZoomer();
      this.resetCanvasSize();
      return this.redraw();
    };

    RotationZoomer.prototype.resetCanvasSize = function() {
      var parentWidth, ratio;
      parentWidth = $(this.context.canvas).parent().width();
      this.width = parentWidth;
      ratio = this.currentRatio();
      this.height = parentWidth * ratio;
      this.context.canvas.width = parentWidth;
      return this.context.canvas.height = parentWidth * ratio;
    };

    RotationZoomer.prototype.currentRatio = function() {
      if (this.hasHorizontalRotation()) {
        return this.ratio.vertical;
      } else {
        return this.ratio.horizontal;
      }
    };

    return RotationZoomer;

  })();

  Zoomer = (function() {
    function Zoomer(context, x, y, configuration) {
      this.context = $.extend(true, {}, context);
      this.configuration = configuration;
      this.x = x;
      this.y = y;
      this.bounds = {
        top: this.originY(),
        left: this.originX(),
        width: this.configuration.zoomerWindowWidth,
        height: this.configuration.zoomerWindowHeight
      };
    }

    Zoomer.prototype.originX = function() {
      return this.x - this.configuration.zoomerWidth / 2;
    };

    Zoomer.prototype.originY = function() {
      return this.y - this.configuration.zoomerHeight / 2;
    };

    Zoomer.prototype.inBounds = function(coords) {
      var ref, ref1;
      return (ref = coords.x, indexOf.call(this.axisX(), ref) >= 0) && (ref1 = coords.y, indexOf.call(this.axisY(), ref1) >= 0);
    };

    Zoomer.prototype.axisY = function() {
      var i, ref, ref1, results;
      return (function() {
        results = [];
        for (var i = ref = this.bounds.top, ref1 = this.bounds.top + this.bounds.height; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this);
    };

    Zoomer.prototype.axisX = function() {
      var i, ref, ref1, results;
      return (function() {
        results = [];
        for (var i = ref = this.bounds.left, ref1 = this.bounds.left + this.bounds.width; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this);
    };

    return Zoomer;

  })();

}).call(this);
