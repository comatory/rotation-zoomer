// Generated by CoffeeScript 1.11.0
(function() {
  var rotationZoomer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($) {
    return $.fn.rotationZoomer = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return this.each(function(index, el) {
        return new rotationZoomer(el, opts);
      });
    };
  })($);

  rotationZoomer = (function() {
    function rotationZoomer(el, opts) {
      this.zoom = bind(this.zoom, this);
      this.$el = $(el);
      this.el = el;
      this.opts = opts;
      this.parseOptions();
      this.initialize();
    }

    rotationZoomer.prototype.initialize = function() {
      this.width = this.$el.width();
      this.height = this.$el.height();
      this.dimensions = {
        vert: {
          w: this.width,
          h: this.height
        },
        hor: {
          w: this.height,
          h: this.width
        }
      };
      return this.initializeCanvas();
    };

    rotationZoomer.prototype.initializeCanvas = function() {
      this.$canvas = $('<canvas>');
      this.$canvas.css({
        position: this.$el.css('position'),
        display: this.$el.css('display')
      });
      this.$el.parents().first().append(this.$canvas);
      this.$el.css('display', 'none');
      this.context = this.$canvas.get(0).getContext('2d');
      this.bindControls();
      return this.transform();
    };

    rotationZoomer.prototype.parseOptions = function() {
      this.options = {
        rotation: this.opts.rotation || 0,
        rotateButton: this.opts.rotateButton,
        antiRotateButton: this.opts.antiRotateButton,
        zoomerWidth: this.opts.ZoomerWidth || 100,
        zoomerHeight: this.opts.ZoomerHeight || 100,
        scale: this.opts.scale || 2.5
      };
      return this.deg = this.options.rotation;
    };

    rotationZoomer.prototype.bindControls = function() {
      if (this.options.rotateButton) {
        this.$rotateButton = $(this.options.rotateButton);
      }
      if (this.options.antiRotateButton) {
        this.$antiRotateButton = $(this.options.antiRotateButton);
      }
      if (this.$rotateButton) {
        this.$rotateButton.on('click', (function(_this) {
          return function() {
            return _this.rotateCW();
          };
        })(this));
      }
      if (this.$antiRotateButton) {
        this.$antiRotateButton.on('click', (function(_this) {
          return function() {
            return _this.rotateACW();
          };
        })(this));
      }
      return this.$canvas.on('click', this.zoom);
    };

    rotationZoomer.prototype.setWidthAndHeight = function() {
      if (this.hasHorizontalRotation()) {
        this.width = this.dimensions.hor.w;
        return this.height = this.dimensions.hor.h;
      } else {
        this.width = this.dimensions.vert.w;
        return this.height = this.dimensions.vert.h;
      }
    };

    rotationZoomer.prototype.transform = function() {
      console.log('transforming');
      this.setWidthAndHeight();
      this.context.canvas.width = this.width;
      this.context.canvas.height = this.height;
      return this.rotate();
    };

    rotationZoomer.prototype.hasHorizontalRotation = function() {
      return this.deg === 90 || this.deg === 270;
    };

    rotationZoomer.prototype.redraw = function() {
      this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
      return this.draw();
    };

    rotationZoomer.prototype.draw = function() {
      if (this.hasHorizontalRotation()) {
        return this.context.drawImage(this.el, 0, 0, this.height, this.width);
      } else {
        return this.context.drawImage(this.el, 0, 0, this.width, this.height);
      }
    };

    rotationZoomer.prototype.rotate = function() {
      switch (this.deg) {
        case 90:
          this.context.translate(this.width, 0);
          break;
        case 270:
          this.context.translate(0, this.height);
          break;
        case 180:
          this.context.translate(this.width, this.height);
          break;
      }
      this.context.rotate((Math.PI / 180) * this.deg);
      return this.redraw();
    };

    rotationZoomer.prototype.rotateCW = function() {
      this.deg = this.deg + 90 >= 360 ? 0 : this.deg + 90;
      return this.transform();
    };

    rotationZoomer.prototype.rotateACW = function() {
      this.deg = this.deg - 90 < 0 ? 270 : this.deg - 90;
      return this.transform();
    };

    rotationZoomer.prototype.zoom = function(e) {
      this.coords = {
        x: e.clientX - this.context.canvas.getBoundingClientRect().left,
        y: e.clientY - this.context.canvas.getBoundingClientRect().top
      };
      this.sourceCoords = this.deg === 0 ? {
        x: -this.coords.x + (this.options.zoomerWidth / (this.options.scale * 2)),
        y: -this.coords.y + (this.options.zoomerWidth / (this.options.scale * 2))
      } : this.deg === 90 ? {
        x: -this.coords.x + (this.options.zoomerWidth / (this.options.scale * 2)),
        y: -this.coords.y + (this.options.zoomerWidth / (this.options.scale * 2))
      } : this.deg === 180 ? {
        x: this.coords.y + (this.options.zoomerWidth / (this.options.scale * 2)),
        y: this.coords.x + (this.options.zoomerWidth / (this.options.scale * 2))
      } : void 0;
      console.log(this.context.canvas.getBoundingClientRect());
      console.log(this.coords);
      return this.openZoomer();
    };

    rotationZoomer.prototype.openZoomer = function() {
      this.redraw();
      this.$zoomer = $('<canvas>');
      this.zoomerContext = this.$zoomer.get(0).getContext('2d');
      this.zoomerContext.canvas.width = this.options.zoomerWidth;
      this.zoomerContext.canvas.height = this.options.zoomerHeight;
      this.zoomerContext.scale(this.options.scale, this.options.scale);
      this.zoomerContext.translate(this.sourceCoords.x, this.sourceCoords.y);
      this.zoomerContext.drawImage(this.context.canvas, 0, 0);
      this.context.drawImage(this.zoomerContext.canvas, this.coords.x - this.zoomerWidthWindow(), this.coords.y - this.zoomerHeightWindow(), this.zoomerContext.canvas.width, this.zoomerContext.canvas.height);
      return this.context.strokeRect(this.coords.x - this.zoomerWidthWindow(), this.coords.y - this.zoomerHeightWindow(), this.zoomerContext.canvas.width, this.zoomerContext.canvas.height);
    };

    rotationZoomer.prototype.zoomerWidthWindow = function() {
      return this.options.zoomerWidth / 2;
    };

    rotationZoomer.prototype.zoomerHeightWindow = function() {
      return this.options.zoomerHeight / 2;
    };

    return rotationZoomer;

  })();

}).call(this);
